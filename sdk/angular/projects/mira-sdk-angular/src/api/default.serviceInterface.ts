/**
 * mira API
 * API for Project-Mira
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CreateFavoriteResponse } from '../model/models';
import { CreateSubItemFavoriteRequestBody } from '../model/models';
import { CreateSubItemFavoriteResponse } from '../model/models';
import { Favorite } from '../model/models';
import { GetFavoriteByMainItemIdResponse } from '../model/models';
import { GetMainItemByIdResponse } from '../model/models';
import { GetOnAirItemListResponse } from '../model/models';
import { GetSubItemResponse } from '../model/models';
import { ListFavoritesResponse } from '../model/models';
import { ListMainItemResponse } from '../model/models';
import { ListSubItemFavoriteResponse } from '../model/models';
import { PatchFavoriteBody } from '../model/models';


import { MiraConfiguration }                                     from '../configuration';



export interface DefaultMiraInterface {
    defaultHeaders: HttpHeaders;
    configuration: MiraConfiguration;

    /**
     * 
     * create a favorite for user and item
     * @param Favorite 
     */
    createFavorite(Favorite: Favorite, extraHttpRequestParams?: any): Observable<CreateFavoriteResponse>;

    /**
     * 
     * create a SubItemFavorite
     * @param CreateSubItemFavoriteRequestBody 
     */
    createSubItemFavorite(CreateSubItemFavoriteRequestBody: CreateSubItemFavoriteRequestBody, extraHttpRequestParams?: any): Observable<CreateSubItemFavoriteResponse>;

    /**
     * 
     * Delete a favorite
     * @param id 
     */
    deleteFavorite(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Delete a SubItemFavorite
     * @param id 
     */
    deleteSubItemFavorite(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * get favorite by MainItem id
     * @param id 
     */
    getFavoriteByMainItemId(id: string, extraHttpRequestParams?: any): Observable<GetFavoriteByMainItemIdResponse>;

    /**
     * 
     * get a MainItem by id
     * @param id MainItem id
     * @param coverImage populate coverImage if true
     * @param subItems populate subItems if true
     */
    getMainItemById(id: string, coverImage?: string, subItems?: string, extraHttpRequestParams?: any): Observable<GetMainItemByIdResponse>;

    /**
     * 
     * get a SubItem by id
     * @param id SubItem Id
     */
    getSubItemById(id: string, extraHttpRequestParams?: any): Observable<GetSubItemResponse>;

    /**
     * 
     * list favorites for user
     * @param status 
     * @param offset 
     * @param limit 
     * @param orderBy 
     * @param sort 
     */
    listFavorites(status: string, offset?: number, limit?: number, orderBy?: string, sort?: string, extraHttpRequestParams?: any): Observable<ListFavoritesResponse>;

    /**
     * 
     * list MainItems
     * @param mainType 
     * @param type 
     * @param subType 
     * @param offset 
     * @param limit 
     * @param orderBy 
     * @param sort 
     * @param keyword 
     */
    listMainItems(mainType: string, type?: string, subType?: string, offset?: number, limit?: number, orderBy?: string, sort?: string, keyword?: string, extraHttpRequestParams?: any): Observable<ListMainItemResponse>;

    /**
     * 
     * list SubItemFavorite
     * @param itemId itemId of the SubItem, if provided then other parameters are ignored
     * @param offset 
     * @param limit 
     * @param orderBy 
     * @param sort 
     */
    listSubItemFavorites(itemId?: string, offset?: number, limit?: number, orderBy?: string, sort?: string, extraHttpRequestParams?: any): Observable<ListSubItemFavoriteResponse>;

    /**
     * 
     * get a list of on air MainItems with cover image
     * @param type type of MainItem, must be either anime or real
     */
    onAirItem(type: string, extraHttpRequestParams?: any): Observable<GetOnAirItemListResponse>;

    /**
     * 
     * change status of a favorite
     * @param id 
     * @param PatchFavoriteBody 
     */
    patchFavorite(id: string, PatchFavoriteBody: PatchFavoriteBody, extraHttpRequestParams?: any): Observable<{}>;

}
