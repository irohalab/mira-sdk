openapi: 3.0.3
info:
  version: 1.0.0
  title: mira API
  description: API for Project-Mira
security:
  - oAuth2:
      - bookmark
paths:
  /public/item/on-air:
    get:
      description: get a list of on air MainItems with cover image
      operationId: onAirItem
      parameters:
        - name: type
          in: query
          required: true
          description: 'type of MainItem, must be either anime or real'
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned a list of on air MainItems with cover image.
          content:
            application/json:
              schema:
                title: GetOnAirItemListResponse
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OnAirItem'
                    description: a list of OnAirItems
  /public/item/main:
    get:
      description: list MainItems
      operationId: listMainItems
      parameters:
        - name: mainType
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: false
          schema:
            type: string
        - name: subType
          in: query
          required: false
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: keyword
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            Successfully return a list of MainItems and a total count of
            MainItems that match the condition
          content:
            application/json:
              schema:
                title: listMainItemResponse
                type: object
                required:
                  - data
                  - total
                  - status
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MainItem'
                    description: a list of MainItems
                  total:
                    type: integer
                    description: total number of the result
  '/public/item/main/subItem/{id}':
    get:
      description: get a SubItem by id
      operationId: getSubItemById
      parameters:
        - name: id
          in: path
          required: true
          description: SubItem Id
          schema:
            type: string
      responses:
        '200':
          description: Successfully return a SubItem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubItem'
  '/public/item/main/{id}':
    get:
      description: get a MainItem by id
      operationId: getMainItemById
      parameters:
        - name: id
          in: path
          required: true
          description: MainItem id
          schema:
            type: string
        - name: coverImage
          in: query
          required: false
          description: populate coverImage if true
          schema:
            type: string
        - name: subItems
          in: query
          required: false
          description: populate subItems if true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned a MainItem.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainItem'
  /favorite:
    get:
      description: list favorites for user
      operationId: listFavorites
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns a list of favorite object of a user
          content:
            application/json:
              schema:
                title: listFavoritesResponse
                type: object
                required:
                  - data
                  - total
                  - status
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Favorite'
                    description: a list of Favorite
                  total:
                    type: integer
                    description: total number of the result
    post:
      description: create a favorite for user and item
      operationId: createFavorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favorite'
      responses:
        '200':
          description: Successfully created a favorite record for itemId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
  '/favorite/{id}':
    delete:
      description: Delete a favorite
      operationId: deleteFavorite
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
    patch:
      description: change status of a favorite
      operationId: patchFavorite
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: patchFavoriteBody
              type: object
              required:
                - status
              properties:
                status:
                  $ref: '#/components/schemas/FavoriteStatus'
                reviewComment:
                  type: string
                rating:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/200'
  '/favorite/main/{id}':
    get:
      description: get favorite by MainItem id
      operationId: getFavoriteByMainItemId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully get a favorite
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '404':
          description: Not found
  /favorite/sub:
    get:
      description: list SubItemFavorite
      operationId: listSubItemFavorites
      parameters:
        - name: itemId
          in: query
          required: false
          schema:
            type: string
          description: 'itemId of the SubItem, if provided then other parameters are ignored'
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully return a list of SubItemFavorite
          content:
            application/json:
              schema:
                title: listSubItemFavoriteResponse
                type: object
                required:
                  - data
                  - status
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubItemFavorite'
                  total:
                    type: integer
                    description: >-
                      total number of the result, if itemId is provided, this
                      field will not available
    post:
      description: create a SubItemFavorite
      operationId: createSubItemFavorite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: createSubItemFavoriteRequestBody
              type: object
              required:
                - subItemId
              properties:
                subItemId:
                  type: string
      responses:
        '200':
          description: Successfully created a SubItemFavorite
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubItemFavorite'
  '/favorite/sub/{id}':
    post:
      description: Delete a SubItemFavorite
      operationId: deleteSubItemFavorite
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
  /client-mapping:
    get:
      description: Add ClientMapping
      operationId: AddClientMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: addClientMappingRequestBody
              type: array
              items:
                type: string
      responses:
        '200':
          description: Successfully added ClientMapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientMapping'
  '/client-mapping/main/{id}':
    delete:
      description: Delete ClientMapping by MainItem id
      operationId: DeleteClientMappingByMainItemId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the result of the operation
          content:
            application/json:
              schema:
                title: DeleteClientMappingByMainItemResponse
                type: object
                required:
                  - data
                properties:
                  data:
                    type: integer
                    description: >-
                      how many entries are deleted, 1 is successful, 0 is
                      unsuccessful.
components:
  securitySchemes:
    oAuth2:
      type: oauth2
      description: 'OAuth with Client Credentials Flow, Authorization Code Flow'
      flows:
        authorizationCode:
          authorizationUrl: 'https://authorization.box.moe/oauth2/token'
          tokenUrl: 'https://authorization.box.moe/oauth2/token'
          scopes:
            bookmark: will grant application to access the user's bookmarks and reviews
  schemas:
    ItemType:
      type: string
      enum:
        - anime
        - game
        - music
        - book
        - individual
        - character
        - real
        - association
        - corporation
        - organization
        - ship
        - mechanic
      x-enum-varnames:
        - Anime
        - Game
        - Music
        - Book
        - Individual
        - Character
        - RealWorld
        - Association
        - Corporation
        - Organization
        - Ship
        - Mechanic
    ItemSubType:
      type: string
      enum:
        - other
        - TV
        - web
        - OVA
        - movie
        - Novel
        - Comic
        - Illustration
        - jp
        - en
        - cn
        - PC
        - NDS
        - PSP
        - PS2
        - PS3
        - Xbox360
        - Mac OS
        - PS5
        - Xbox Series X/S
        - PS4
        - Xbox One
        - Nintendo Switch
        - Wii U
        - Wii
        - PS Vita
        - 3DS
        - iOS
        - Android
        - ARC
        - XBOX
        - GameCube
        - Dreamcast
        - Nitendo 64
        - PlayStation
        - SFC
        - FC
        - NEOGEO Pocket Color
        - GBA
        - GB
        - Virtual Boy
        - WonderSwan Color
        - WonderSwan
      x-enum-varnames:
        - Other
        - TV
        - Web
        - OVA
        - Movie
        - Novel
        - Comic
        - Illustration
        - DramaJp
        - DramaEn
        - DramaCn
        - PC
        - NDS
        - PSP
        - PS2
        - PS3
        - Xbox360
        - Mac
        - PS5
        - XboxSeriesXS
        - PS4
        - XboxOne
        - NintendoSwitch
        - WiiU
        - Wii
        - PSVita
        - N3DS
        - IOS
        - Android
        - ARC
        - XBOX
        - GameCube
        - Dreamcast
        - Nintendo64
        - PlayStation
        - SFC
        - FC
        - NEOGEOPocketColor
        - GBA
        - GB
        - VirtualBoy
        - WonderSwanColor
        - WonderSwan
    PropertyValue:
      title: PropertyValue
      type: object
      required:
        - value
        - locked
      properties:
        propertyType:
          type: string
          nullable: true
          enum:
            - Staff
            - Item
            - Character
            - Info
            - Cast
        locked:
          type: boolean
        value:
          oneOf:
            - type: string
            - type: array
              items:
                type: object
                additionalProperties:
                  type: string
            - type: array
              items:
                type: string
    OnAirItem:
      type: object
      required:
        - id
        - bgmId
        - type
      properties:
        id:
          type: string
        bgmId:
          type: integer
        publicTime:
          type: string
          description: RFC3339 Datetime
          format: date-time
          example: '2022-12-21T01:58:00Z'
        type:
          $ref: '#/components/schemas/ItemType'
        subType:
          $ref: '#/components/schemas/ItemSubType'
        name:
          type: string
        nameCn:
          type: string
        coverImage:
          $ref: '#/components/schemas/ImageInfo'
    ItemEntity:
      type: object
      required:
        - id
        - bgmId
        - properties
      properties:
        id:
          type: string
        bgmId:
          type: integer
        publicTime:
          type: string
          format: date-time
          description: Not used for ItemType.Individual and ItemType.Character
        name:
          type: string
        nameCn:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PropertyValue'
    MainItem:
      allOf:
        - $ref: '#/components/schemas/ItemEntity'
        - type: object
          title: MainItem
          required:
            - mainType
            - type
            - isCollection
          properties:
            mainType:
              type: integer
              enum:
                - 0
                - 1
                - 2
              x-enum-varnames:
                - Item
                - Person
                - Character
            type:
              $ref: '#/components/schemas/ItemType'
            subType:
              $ref: '#/components/schemas/ItemSubType'
            isCollection:
              type: boolean
              description: determine if the MainItem is collection item
            coverImage:
              $ref: '#/components/schemas/ImageInfo'
            squareImage:
              $ref: '#/components/schemas/ImageInfo'
            subItems:
              type: array
              items:
                $ref: '#/components/schemas/SubItem'
            summary:
              type: string
    ImageInfo:
      title: ImageInfo
      type: object
      description: image information
      required:
        - id
        - url
        - width
        - height
        - dormantColor
      properties:
        id:
          type: string
        url:
          type: string
        width:
          type: integer
        height:
          type: integer
        dormantColor:
          type: string
    SubItem:
      allOf:
        - $ref: '#/components/schemas/ItemEntity'
        - type: object
          title: SubItem
          required:
            - type
            - episodeType
            - sort
            - mainItemId
          properties:
            type:
              type: integer
              enum:
                - 0
                - 1
              x-enum-varnames:
                - Episode
                - Song
            episodeType:
              type: integer
              nullable: true
              enum:
                - 0
                - 1
              x-enum-varnames:
                - Episode
                - Special
            ep:
              type: integer
              nullable: true
            disc:
              type: integer
              nullable: true
            desc:
              type: string
            sort:
              type: number
            mainItemId:
              type: string
            mainItem:
              $ref: '#/components/schemas/MainItem'
    FavoriteStatus:
      type: string
      enum:
        - Planned
        - Watched
        - Watching
        - OnHold
        - Dropped
      x-enum-varnames:
        - Planned
        - Watched
        - Watching
        - OnHold
        - Dropped
    Favorite:
      type: object
      required:
        - status
        - item
        - userId
      properties:
        id:
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/FavoriteStatus'
        reviewComment:
          type: string
        rating:
          type: integer
        item:
          $ref: '#/components/schemas/MainItem'
        userId:
          type: string
    SubItemFavorite:
      type: object
      required:
        - id
        - subItem
        - userId
      properties:
        id:
          type: string
        subItem:
          $ref: '#/components/schemas/SubItem'
        userId:
          type: string
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
    ClientMapping:
      type: object
      required:
        - id
        - clientId
        - item
      properties:
        id:
          type: string
        clientId:
          type: string
        item:
          $ref: '#/components/schemas/MainItem'
  responses:
    '200':
      description: Operation Complete Successfully
      content:
        application/json:
          schema:
            title: SucceedEmptyResponse
            type: object
            required:
              - message
            properties:
              message:
                type: string
